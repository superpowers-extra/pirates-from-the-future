#ifdef GL_OES_standard_derivatives
    #extension GL_OES_standard_derivatives : enable
#endif 
#define PHONG
#define USE_NORMALMAP

THREE_ShaderChunk(common)
THREE_ShaderChunk(lights_phong_pars_fragment)
THREE_ShaderChunk(shadowmap_pars_fragment)

vec3 emissive = vec3(0.0);

uniform vec3 color;

uniform float specularStrength;
uniform float shininess;
uniform vec3 specular;

uniform sampler2D displace;
varying vec2 vUv;

float Deg2Rad = 0.01745329251;

uniform float time;
uniform vec4 heights;
uniform vec4 scaleFactors;
uniform vec4 rotateValues;
uniform vec4 speedsX;
uniform vec4 speedsZ;
uniform float foamStart;
uniform float foamEnd;

uniform float normalIntensity;
uniform vec3 shadowColorAdd;

varying vec3 vPosition;
varying mat3 vNormalMatrix;

float height = 0.0;

varying vec4 debug;

#ifdef USE_NORMALMAP
	// Per-Pixel Tangent Space Normal Mapping
	// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html

	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm )
  { 
    vec3 myNormal = vec3(0.);
    float totalHeights = heights.x + heights.y + heights.z + heights.w;
    height = 0.0;
        
    vec3 q0 = dFdx( eye_pos.xyz );
    vec3 q1 = dFdy( eye_pos.xyz );
    
    vec3 N = normalize( surf_norm );
    
    for ( int i=0 ; i<4 ; i++ )
    {
      if ( heights[i] != 0.0 )
      { 
        vec2 tmpUV = vPosition.xz * scaleFactors[i];

        float angle = rotateValues[i] * Deg2Rad;

        mat2 rotation = mat2( 
          cos(angle), sin(angle),
          -sin(angle), cos(angle) );

        mat2 counterRotation = mat2( 
        cos(-angle), sin(-angle),
        -sin(-angle), cos(-angle) );

        tmpUV = rotation * tmpUV;

        tmpUV.x += time * speedsX[i];
        tmpUV.y += time * speedsZ[i];
        
        vec2 st0 = dFdx( tmpUV.st );
        vec2 st1 = dFdy( tmpUV.st );

        vec3 S = normalize( q0 * st1.t - q1 * st0.t );
        vec3 T = normalize( -q0 * st1.s + q1 * st0.s );

        vec4 tex = texture2D(displace, tmpUV );
        height += tex.a * heights[i];
        
		    mat3 tsn = mat3( S, T, N );

        myNormal += tsn * vec3(counterRotation*tex.rg, tex.b) * heights[i] / totalHeights ;
      }
    }
    height = height / totalHeights;
    height = smoothstep( foamStart, foamEnd, height);
		//return normalize( mix ( N, myNormal, normalIntensity ) );
		return normalize(myNormal );

	}

#endif

void main()
{
  vec3 outgoingLight = vec3( 0.0 ); // outgoing light does not have an alpha, the surface does
  vec3 shadowMask = vec3( 1.0 );
  vec4 diffuseColor = vec4( 1. );
  
  THREE_ShaderChunk(normal_phong_fragment)
  THREE_ShaderChunk(lights_phong_fragment)

  vec4 c = vec4( 0.5, 0.8, 1.0, 1.0);
  
  //height = smoothstep(0.9, 1., height );
  
  c.rgb = mix( c.rgb, vec3(1.0), height);
  
  //*
  float outLightLevel = length( outgoingLight );
  if ( outLightLevel > 2.0 )
  {
    outLightLevel = 2.0;
  }
  else if ( outLightLevel > 1.05 )
  {
    outLightLevel = 1.0;
  }
  else if ( outLightLevel > 0.93 )
  {
    outLightLevel = 0.5;
  }
  else
  {
    outLightLevel = 0.0;
  }
  outgoingLight = normalize(outgoingLight)*outLightLevel;
  
  outgoingLight = outgoingLight * 0.2 + 0.8;
  // */
  
  vec3 m_outgoingLight = outgoingLight;
  
  THREE_ShaderChunk(shadowmap_fragment)
  
  #ifdef USE_SHADOWMAP
  outgoingLight = m_outgoingLight * ( 1.0-( (1.0-shadowMask) * (1.0-shadowColorAdd ) ) );
  #endif
    
  c.rgb *= outgoingLight;
  
  c.rgb *= color;
  
  //c.rgb = vec3(height);
  
  gl_FragColor = c ;
}
